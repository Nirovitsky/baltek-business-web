 <div className="h-full overflow-y-auto bg-background">
      <BreadcrumbNavigation />
      <div className="layout-container-body py-4" data-testid="chat-page">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-200px)]">
          {/* Conversations List */}
          <Card className="lg:col-span-1">
            <CardHeader className="pb-4">
              <div className="flex items-center justify-between">
                <CardTitle className="text-lg">Conversations</CardTitle>
              </div>

              {/* Search */}
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground/60 w-4 h-4" />
                <Input
                  placeholder="Search conversations..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-9"
                  data-testid="input-search-conversations"
                />
              </div>
            </CardHeader>

            <CardContent className="p-0">
              <ScrollArea className="h-[calc(100vh-340px)]">
                {roomsLoading ? (
                  <div className="p-4 space-y-4">
                    {[...Array(5)].map((_, i) => (
                      <div key={i} className="flex items-start space-x-3">
                        <div className="relative flex-shrink-0">
                          <Avatar className="w-14 h-14 ring-2 ring-background shadow-sm">
                            <AvatarFallback className="bg-muted animate-pulse">
                              <div className="w-full h-full bg-muted-foreground/20 rounded-full" />
                            </AvatarFallback>
                          </Avatar>
                        </div>
                        <div className="flex-1 min-w-0">
                          <div className="h-4 bg-muted rounded animate-pulse mb-2" />
                          <div className="h-3 bg-muted rounded animate-pulse w-2/3" />
                        </div>
                      </div>
                    ))}
                  </div>
                ) : conversations.length === 0 ? (
                  <div className="p-8 text-center text-muted-foreground">
                    <MessageCircle className="w-12 h-12 mx-auto mb-4 text-muted-foreground/60" />
                    <p className="font-medium mb-2">No conversations yet</p>
                    <p className="text-sm">
                      When recruiters contact you about opportunities, your
                      conversations will appear here.
                    </p>
                  </div>
                ) : (
                  <div className="divide-y divide-border">
                    {conversations.map((conversation: Conversation) => (
                      <div
                        key={conversation.id}
                        onClick={() => {
                          setSelectedConversation(conversation.id);
                          markAsReadMutation.mutate(conversation.id);
                        }}
                        className={`relative p-4 cursor-pointer transition-all duration-200 ease-in-out hover:shadow-sm transform hover:scale-[1.01] ${
                          selectedConversation === conversation.id
                            ? "bg-primary/10 shadow-sm scale-[1.01]"
                            : "hover:bg-muted"
                        } ${conversation.content_object?.status === "expired" ? "opacity-70" : ""}`}
                        data-testid={`conversation-${conversation.id}`}
                      >
                        <div className="flex items-start space-x-3">
                          <div className="relative flex-shrink-0">
                            <Avatar className="w-14 h-14 ring-2 ring-background shadow-sm">
                              <AvatarImage
                                src={conversation.content_object?.job?.organization?.logo}
                                className="object-cover"
                              />
                              <AvatarFallback className="bg-gradient-to-br from-primary/20 to-primary/30 text-primary font-semibold text-lg">
                                {conversation.content_object?.job?.organization?.display_name?.[0] ||
                                  conversation.content_object?.job?.organization?.official_name?.[0] ||
                                  "C"}
                              </AvatarFallback>
                            </Avatar>
                            {conversation.unread_message_count > 0 && (
                              <Badge className="absolute -top-2 -right-2 h-6 w-6 rounded-full p-0 flex items-center justify-center text-xs bg-red-500 text-white border-2 border-background shadow-md animate-pulse">
                                {conversation.unread_message_count > 99 ? "99+" : conversation.unread_message_count}
                              </Badge>
                            )}
                            {conversation.unread_message_count === 0 && (
                              <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-400 rounded-full border-2 border-background"></div>
                            )}
                          </div>

                          <div className="flex-1 min-w-0">
                            <div className="flex items-start justify-between mb-2">
                              <div className="flex items-start space-x-2 flex-1 min-w-0">
                                <h3 className={`font-semibold text-base leading-5 ${
                                  conversation.unread_message_count > 0
                                    ? "text-foreground"
                                    : "text-foreground"
                                } break-words`}>
                                  {(conversation.content_object?.job?.organization?.display_name || 
                                    conversation.content_object?.job?.organization?.official_name || "Unknown Company") + 
                                   (conversation.content_object?.job?.title ? ` - ${conversation.content_object.job.title}` : "")}
                                </h3>
                                {conversation.content_object?.status === "expired" && (
                                  <Badge
                                    variant="destructive"
                                    className="text-xs px-2 py-0.5 bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-400 border-red-200 dark:border-red-800 font-medium flex-shrink-0"
                                  >
                                    Expired
                                  </Badge>
                                )}
                              </div>
                              <span className="text-xs text-muted-foreground flex-shrink-0 ml-2 font-medium">
                                {conversation.last_message_date_created 
                                  ? formatTime(new Date(conversation.last_message_date_created * 1000).toISOString())
                                  : "Recently"}
                              </span>
                            </div>

                            {/* Last message */}
                            <div className="flex items-center">
                              {conversation.last_message_text ? (
                                <p className={`text-sm truncate flex-1 leading-5 ${
                                  conversation.unread_message_count > 0
                                    ? "text-foreground font-medium"
                                    : "text-muted-foreground"
                                }`}>
                                  {conversation.last_message_text}
                                </p>
                              ) : (
                                <p className="text-sm text-muted-foreground/60 italic flex-1">
                                  Start the conversation
                                </p>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        {/* Active conversation indicator */}
                        {selectedConversation === conversation.id && (
                          <div className="absolute right-0 top-1/2 transform -translate-y-1/2 w-1 h-12 bg-primary/100 rounded-l-full"></div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </ScrollArea>
            </CardContent>
          </Card>

          {/* Messages Area */}
          <Card className="lg:col-span-2 flex flex-col">
            {selectedConversation ? (
              <>
                {/* Chat Header */}
                <CardHeader className="pb-4 border-b">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <Avatar 
                        className="w-10 h-10 cursor-pointer hover:ring-2 hover:ring-primary/50 transition-all"
                        onClick={() => {
                          const orgId = selectedConversationData?.content_object?.job?.organization?.id;
                          if (orgId) {
                            navigate(`/company/${orgId}`);
                          }
                        }}
                      >
                        <AvatarImage
                          src={selectedConversationData?.content_object?.job?.organization?.logo}
                        />
                        <AvatarFallback>
                          {selectedConversationData?.content_object?.job?.organization?.display_name?.[0] ||
                            selectedConversationData?.content_object?.job?.organization?.official_name?.[0] ||
                            "C"}
                        </AvatarFallback>
                      </Avatar>
                      <div>
                        <div className="flex items-center space-x-2">
                          <h3 
                            className="font-semibold text-foreground cursor-pointer hover:text-primary transition-colors"
                            onClick={() => {
                              const orgId = selectedConversationData?.content_object?.job?.organization?.id;
                              if (orgId) {
                                navigate(`/company/${orgId}`);
                              }
                            }}
                          >
                            {(selectedConversationData?.content_object?.job?.organization?.display_name || 
                              selectedConversationData?.content_object?.job?.organization?.official_name || "Unknown Company") + 
                             (selectedConversationData?.content_object?.job?.title ? ` - ${selectedConversationData?.content_object?.job?.title}` : "")}
                          </h3>
                          {selectedConversationData?.content_object?.status === "expired" && (
                            <Badge variant="secondary" className="text-xs">
                              Expired
                            </Badge>
                          )}
                        </div>

                        {selectedConversationData?.content_object?.status === "expired" && (
                          <p className="text-xs text-yellow-600 dark:text-yellow-400 mt-1">
                            This conversation has expired and is now read-only.
                          </p>
                        )}
                      </div>
                    </div>

                    <Button variant="ghost" size="sm">
                      <MoreVertical className="w-4 h-4" />
                    </Button>
                  </div>
                </CardHeader>

                {/* Messages */}
                <CardContent className="flex-1 p-0">
                  <ScrollArea className="h-[calc(100vh-400px)] p-4">
                    {messagesLoading ? (
                      <div className="space-y-4">
                        {[...Array(3)].map((_, i) => (
                          <div
                            key={i}
                            className={`flex ${i % 2 === 0 ? "justify-end" : "justify-start"}`}
                          >
                            <div className="flex items-end space-x-2 max-w-xs">
                              {i % 2 !== 0 && (
                                <Avatar className="w-8 h-8">
                                  <AvatarFallback className="bg-muted animate-pulse">
                                    <div className="w-full h-full bg-muted rounded-full" />
                                  </AvatarFallback>
                                </Avatar>
                              )}
                              <div className="bg-muted rounded-lg p-3 animate-pulse">
                                <div className="h-4 bg-muted-foreground/20 rounded w-24" />
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    ) : messagesData?.results?.length === 0 ? (
                      <div className="flex items-center justify-center h-full text-muted-foreground">
                        <div className="text-center">
                          <MessageCircle className="w-12 h-12 mx-auto mb-4 text-muted-foreground/60" />
                          <p>Start the conversation!</p>
                        </div>
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {messagesData?.results
                          ?.filter(
                            (message: Message) =>
                              message && message.id && (message.text || (message.attachments && message.attachments.length > 0)),
                          )
                          .map((message: Message) => {
                            const hasAttachments = message.attachments && message.attachments.length > 0;
                            const hasText = message.text && message.text.trim();
                            
                            // Function to create avatar component
                            const renderAvatar = () => (
                              message.owner !== user?.id && (
                                <Avatar className="w-8 h-8">
                                  <AvatarImage 
                                    src={selectedConversationData?.content_object?.job?.organization?.logo}
                                    className="object-cover"
                                  />
                                  <AvatarFallback className="bg-primary/10 text-primary font-medium">
                                    {selectedConversationData?.content_object?.job?.organization?.display_name?.[0] ||
                                      selectedConversationData?.content_object?.job?.organization?.official_name?.[0] ||
                                      "R"}
                                  </AvatarFallback>
                                </Avatar>
                              )
                            );

                            // Function to create message metadata
                            const renderMessageMetadata = () => (
                              <div className="flex items-center justify-end gap-1 mt-2">
                                {message.status === "failed" && message.error && (
                                  <span className="text-xs text-red-400 mr-2">
                                    {message.error}
                                  </span>
                                )}
                                
                                <span
                                  className={`text-xs ${
                                    message.owner === user?.id
                                      ? "text-white/70"
                                      : "text-muted-foreground"
                                  }`}
                                >
                                  {formatTime(new Date(message.date_created * 1000).toISOString())}
                                </span>
                                
                                {message.owner === user?.id && (
                                  <div className="flex items-center gap-1">
                                    {message.status === "sending" ? (
                                      <Loader2 className="w-3 h-3 text-white/70 animate-spin" />
                                    ) : message.status === "failed" ? (
                                      <Button
                                        variant="ghost"
                                        size="sm"
                                        className="h-5 w-5 p-0 text-red-400 hover:text-red-300"
                                        onClick={() => retryMessage(message.id)}
                                        title="Retry message"
                                      >
                                        <RotateCcw className="w-3 h-3" />
                                      </Button>
                                    ) : message.status === "read" ? (
                                      <CheckCheck className="w-3 h-3 text-white/70" />
                                    ) : (
                                      <Check className="w-3 h-3 text-white/70" />
                                    )}
                                  </div>
                                )}
                              </div>
                            );

                            return (
                              <div key={message.id} className="space-y-2">
                                {/* Render attachments as separate message bubble if present */}
                                {hasAttachments && (
                                  <div className={`flex ${message.owner === user?.id ? "justify-end" : "justify-start"} animate-in fade-in-0 slide-in-from-bottom-2 duration-300`}>
                                    <div
                                      className={`flex items-end space-x-2 max-w-xs lg:max-w-md ${
                                        message.owner === user?.id
                                          ? "flex-row-reverse space-x-reverse"
                                          : ""
                                      }`}
                                    >
                                      {renderAvatar()}
                                      <div className="rounded-lg transition-all duration-200 ease-in-out hover:shadow-md">
                                        <UserMessageAttachments
                                          attachments={message.attachments}
                                          isOwner={message.owner === user?.id}
                                        />
                                        {!hasText && renderMessageMetadata()}
                                      </div>
                                    </div>
                                  </div>
                                )}

                                {/* Render text as separate message bubble if present */}
                                {hasText && (
                                  <div className={`flex ${message.owner === user?.id ? "justify-end" : "justify-start"} animate-in fade-in-0 slide-in-from-bottom-2 duration-300`}>
                                    <div
                                      className={`flex items-end space-x-2 max-w-xs lg:max-w-md ${
                                        message.owner === user?.id
                                          ? "flex-row-reverse space-x-reverse"
                                          : ""
                                      }`}
                                    >
                                      {renderAvatar()}
                                      <div className={`max-w-xs rounded-lg px-3 py-2 ${
                                        message.status === "failed"
                                          ? "bg-red-500 text-white"
                                          : message.status === "sending"
                                          ? "bg-primary/70 text-primary-foreground"
                                          : message.owner === user?.id
                                          ? "bg-primary text-primary-foreground"
                                          : "bg-gray-200 text-gray-900 dark:bg-gray-700 dark:text-gray-100"
                                      }`}>
                                        <p>
                                          <MessageRenderer 
                                            text={message.text} 
                                          />
                                        </p>
                                        <span className={`text-xs ${
                                          message.owner === user?.id || message.status === "failed" || message.status === "sending" 
                                            ? "text-gray-300" 
                                            : "text-gray-500 dark:text-gray-400"
                                        }`}>
                                          {renderMessageMetadata()}
                                        </span>
                                      </div>
                                    </div>
                                  </div>
                                )}
                              </div>
                            );
                          })}
                        <div ref={messagesEndRef} />
                      </div>
                    )}
                  </ScrollArea>
                </CardContent>

                {/* Message Input - Only show if not expired */}
                {selectedConversationData?.content_object?.status !== "expired" ? (
                  <div className="p-4 border-t">
                    {/* File Attachments and Upload Progress */}
                    <ComposerAttachments
                      attachedFiles={attachedFiles}
                      uploadProgress={uploadProgress}
                      onRemoveFile={removeAttachedFile}
                      onCancelUpload={cancelUpload}
                      uploadingFiles={uploadingFiles}
                    />
                    
                    <form
                      onSubmit={handleSendMessage}
                      className="flex space-x-2"
                    >
                      <ComposerAddAttachment
                        onFileSelect={handleFileUpload}
                        uploadingFiles={uploadingFiles}
                        fileInputRef={fileInputRef}
                      />
                      <Input
                        value={messageInput}
                        onChange={(e) => setMessageInput(e.target.value)}
                        placeholder="Type your message..."
                        className="flex-1"
                        data-testid="input-message"
                      />
                      <Button
                        type="submit"
                        disabled={
                          (!messageInput.trim() && attachedFiles.length === 0) ||
                          !socket ||
                          socket.readyState !== WebSocket.OPEN ||
                          uploadingFiles
                        }
                        data-testid="button-send-message"
                      >
                        <Send className="w-4 h-4" />
                      </Button>
                    </form>
                  </div>
                ) : (
                  <div className="p-4 border-t bg-muted">
                    <div className="flex items-center justify-center py-3">
                      <div className="text-center text-muted-foreground">
                        <Clock className="w-5 h-5 mx-auto mb-2 text-muted-foreground/60" />
                        <p className="text-sm font-medium">
                          Conversation Expired
                        </p>
                        <p className="text-xs">
                          This conversation is now read-only
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </>
            ) : (
              /* No Conversation Selected */
              <CardContent className="flex items-center justify-center h-full">
                <div className="text-center text-muted-foreground">
                  <Users className="w-16 h-16 mx-auto mb-4 text-muted-foreground/60" />
                  <h3 className="font-medium mb-2">Select a conversation</h3>
                  <p className="text-sm">
                    Choose a conversation from the left to start messaging
                  </p>
                </div>
              </CardContent>
            )}
          </Card>
        </div>
      </div>
    </div>